#These configuration blocks allow NGINX to act as a reverse proxy, forwarding requests to the appropriate upstream servers based on the requested paths.
#---------------------------------------------------------------------------------------------------------------------------------------------------------

upstream client { #This block defines an upstream server named "client" with the server address "client:3000". It is used to proxy requests to the client application running on port 3000.
    server client:3000;
}

upstream api {#This block defines an upstream server named "api" with the server address "api:5000". It is used to proxy requests to the API server running on port 5000.
    server api:5000;
}

server {#This block defines the main server block and specifies that NGINX should listen on port 80 for incoming requests.
    listen 80;

    location / { #This location block handles requests to the root path ("/") and proxies them to the upstream server named "client" defined earlier.
        proxy_pass http://client;
    }

    location /sockjs-node {#This location block handles requests to the "/sockjs-node" path and proxies them to the upstream server named "client". It also sets the necessary headers to enable WebSocket communication by upgrading the connection.
        proxy_pass http://client;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
    }

    location /api {#This location block handles requests to the "/api" path and rewrites the URL by removing the "/api" prefix. It then proxies the rewritten request to the upstream server named "api".
        rewrite /api/(.*) /$1 break;
        proxy_pass http://api;
    }
}

#-----------------------------------------
#explaiantion regarding this block
# location / {
#     proxy_pass http://client;
# }
# Suppose you have an NGINX server running and configured with the provided configuration. When a request comes in for any path (e.g., "/home", "/about", "/contact"), NGINX will process it according to the following location block above:
# Request: GET /home

# The location block location / matches the requested URL because it acts as a catch-all for any path.

# NGINX identifies that the request matches this location block and processes it accordingly.

# The proxy_pass http://client; line specifies that the request should be forwarded to the upstream server named "client".

# NGINX proxies the original request to the upstream server "client" listening on port 3000 (assuming it was defined elsewhere in the NGINX configuration).

# The upstream server "client" processes the request for the "/home" endpoint and sends the response back to NGINX.

# NGINX receives the response from the upstream server and forwards it back to the original client that made the request.

# In this case, the purpose of this location block is to act as a catch-all for requests to any path. It proxies the requests to the upstream server named "client", allowing NGINX to serve as a reverse proxy for the "client" server. This configuration is commonly used when you have multiple backend servers and want NGINX to distribute incoming requests among them.

# Note that the upstream server "client" must be defined elsewhere in the NGINX configuration, typically in an upstream block, specifying the server's IP address or hostname and the port it's listening on

#----------------------------------------------------------------------------------------
#explaiantion regarding this block
# location /api {
#         rewrite /api/(.*) /$1 break;
#         proxy_pass http://api;
# }

# Suppose you have an NGINX server running and configured with the provided configuration. When a request comes in for the "/api/users" endpoint, NGINX will process it according to the following location block above
# Request: GET /api/users

# The location block location /api matches the requested URL because it starts with "/api".

# The rewrite /api/(.*) /$1 break; line captures the part of the URL after the "/api/" prefix. In our example, it captures "users" and stores it in the capture group $1.

# The rewrite rule transforms the original request from "/api/users" to "/users".

# The proxy_pass http://api; line specifies that the rewritten request should be forwarded to the upstream server named "api".

# NGINX proxies the modified request to the upstream server "api" listening on port 5000.

# The upstream server "api" processes the request for the "/users" endpoint and sends the response back to NGINX.

# NGINX receives the response from the upstream server and forwards it back to the original client that made the request.

# In summary, this location block allows NGINX to act as a reverse proxy for requests to the "/api" path. It removes the "/api" prefix from the requested URL and forwards the modified request to the upstream server "api" for further processing.