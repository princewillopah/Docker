version: '3.8'
services:
  #this nginx server will listin on port 80 for incoming requests, forward them to the php interpreter to execute and ..
  server:
    #here the context is stating that the dockerfile should beuild in the main folder denoted by the "." --  this will make sure more folders e.g. src and nginx, which are required in the dockerfile are available for the building of the image.
    # this is not the the case of the composer-utils service where the context path is "./dockerfiles" indicating that the image is built in the dockerfiles folder. this is because no dependence folder is needed by the dockerfiles
    build:
      context: .
      dockerfile: dockerfiles/nginx.dockerfile
    #nginx, in it configuration file, requres that port 80 on container should be exposed and mapped to some port(in our case 8000) on host maching
    ports:
      - "8000:80"
    # using bind mount to provide our own configuration file for nginx. the bindmount will bind the local file "nginx/nginx.conf" to the container file /etc/nginx/con.d/default.conf and make it read only so the container does not mordify the content of the file
    #note that "/etc/nginx/con.d/default.conf" is povidd by nginx. that is the path in  the container they will work with.
    #note that the nginx.conf is the main configuration but we used "/etc/nginx/con.d/default.conf" instead of "/etc/nginx/nginx.conf". this is because in nginx.conf, the "include /etc/nginx/conf.d/*.conf" is in nginx.conf. this our configuration is in nginx.conf since /etc/nginx/conf.d/*.conf means /etc/nginx/con.d/default.conf
    # ./src:/var/www/html is also made availble so that the  
    # volumes:
    #   - ./src:/var/www/html
    #   - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    # - ./nginx/nginx.conf:/etc/nginx/con.d/default.conf:ro
    # his means that this container/service depends on php service and php service depends on mysql serivce
    depends_on:
      - php
      - mysql

  php:
    build: 
      context: .
      dockerfile: dockerfiles/php.dockerfile
    # need need a bind mount. reason is because we have to ensure that this PHP interpreter can reach our source code and that source code need to be in the WORKDIR "/var/www/html" of the container.
    # thus we need the source code folder in our local dir, and map it to the workdir of the container. ths we need a bind mound. we are going to creat a folder 'src' and mount to ""/var/www/html""
    # we dont have to add the delegate. its just for performance. we may need the container to write frequently. so "ro" is not an option here. deleted will make sure the conainer write access should not be related instantly on our host for performance. 
    # volumes:
    #   - ./src:/var/www/html:delegated

  mysql:
    image: mysql:5.7
    env_file:
      - ./env/mysql.env

  #the composer container utility will help us set the laravel project first, the we may use it subsequently to install other laravel packages whenever we need it
  composer-utils:
    build:
      context: ./dockerfiles
      dockerfile: composer.dockerfile
    volumes:
      - ./src:/var/www/html:delegated
  
  # artisan is a LARAVEL command that needs php to execute codes. it also needs volumes and source code because it is executed on our source code
  artisan-utils:
    # we use the same as php servic so we dont repeat. we could have used a different dockerfile. the difference is he entrypoint which we can declare here
    build: 
      context: .
      dockerfile: dockerfiles/php.dockerfile
    volumes:
      - ./src:/var/www/html
    # it will be docker compose run --rm artisan migrate - this will execute the ifle with php and it can be found in the path provided
    entrypoint: ["php","/var/www/html/artisan"]

  npm-utils:
    image: node:14
    working_dir: /var/www/html
    entrypoint: ["npm"]
    volumes:
      - ./src:/var/www/html